///
/// @Generated by Mockolo
///

import BackgroundTasks
import Combine
import CryptoKit
@testable import ENCore
import ExposureNotification
import Foundation
import Security
import SnapKit
import UIKit
import WebKit

class MainBuildableMock: MainBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (Routing))?
    func build() -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return RoutingMock()
    }
}

class AppEntryPointMock: AppEntryPoint {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var startCallCount = 0
    var startHandler: (() -> ())?
    func start() {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler()
        }
    }
}

class InfectedInfoRoutingMock: InfectedInfoRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class InfectedInfoViewControllableMock: InfectedInfoViewControllable {
    init() {}
    init(router: InfectedInfoRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var routerSetCallCount = 0
    var router: InfectedInfoRouting? { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
    }
}

class InfectedRoutingMock: InfectedRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class InfectedViewControllableMock: InfectedViewControllable {
    init() {}
    init(router: InfectedRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var routerSetCallCount = 0
    var router: InfectedRouting? { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
    }
}

class MainRoutingMock: MainRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var attachStatusCallCount = 0
    var attachStatusHandler: ((NSLayoutYAxisAnchor) -> ())?
    func attachStatus(topAnchor: NSLayoutYAxisAnchor) {
        attachStatusCallCount += 1
        if let attachStatusHandler = attachStatusHandler {
            attachStatusHandler(topAnchor)
        }
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var attachMoreInformationCallCount = 0
    var attachMoreInformationHandler: (() -> ())?
    func attachMoreInformation() {
        attachMoreInformationCallCount += 1
        if let attachMoreInformationHandler = attachMoreInformationHandler {
            attachMoreInformationHandler()
        }
    }

    var routeToAboutAppCallCount = 0
    var routeToAboutAppHandler: (() -> ())?
    func routeToAboutApp() {
        routeToAboutAppCallCount += 1
        if let routeToAboutAppHandler = routeToAboutAppHandler {
            routeToAboutAppHandler()
        }
    }

    var detachAboutAppCallCount = 0
    var detachAboutAppHandler: ((Bool) -> ())?
    func detachAboutApp(shouldHideViewController: Bool) {
        detachAboutAppCallCount += 1
        if let detachAboutAppHandler = detachAboutAppHandler {
            detachAboutAppHandler(shouldHideViewController)
        }
    }

    var routeToReceivedNotificationCallCount = 0
    var routeToReceivedNotificationHandler: (() -> ())?
    func routeToReceivedNotification() {
        routeToReceivedNotificationCallCount += 1
        if let routeToReceivedNotificationHandler = routeToReceivedNotificationHandler {
            routeToReceivedNotificationHandler()
        }
    }

    var detachReceivedNotificationCallCount = 0
    var detachReceivedNotificationHandler: ((Bool) -> ())?
    func detachReceivedNotification(shouldDismissViewController: Bool) {
        detachReceivedNotificationCallCount += 1
        if let detachReceivedNotificationHandler = detachReceivedNotificationHandler {
            detachReceivedNotificationHandler(shouldDismissViewController)
        }
    }

    var routeToRequestTestCallCount = 0
    var routeToRequestTestHandler: (() -> ())?
    func routeToRequestTest() {
        routeToRequestTestCallCount += 1
        if let routeToRequestTestHandler = routeToRequestTestHandler {
            routeToRequestTestHandler()
        }
    }

    var detachRequestTestCallCount = 0
    var detachRequestTestHandler: ((Bool) -> ())?
    func detachRequestTest(shouldDismissViewController: Bool) {
        detachRequestTestCallCount += 1
        if let detachRequestTestHandler = detachRequestTestHandler {
            detachRequestTestHandler(shouldDismissViewController)
        }
    }

    var routeToInfectedCallCount = 0
    var routeToInfectedHandler: (() -> ())?
    func routeToInfected() {
        routeToInfectedCallCount += 1
        if let routeToInfectedHandler = routeToInfectedHandler {
            routeToInfectedHandler()
        }
    }
}

class OnboardingConsentViewControllableMock: OnboardingConsentViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class OnboardingManagingMock: OnboardingManaging {
    init() {}
    init(onboardingSteps: [OnboardingStep] = [OnboardingStep]()) {
        self.onboardingSteps = onboardingSteps
    }

    var onboardingStepsSetCallCount = 0
    var onboardingSteps: [OnboardingStep] = [OnboardingStep]() { didSet { onboardingStepsSetCallCount += 1 } }

    var getStepCallCount = 0
    var getStepHandler: ((Int) -> (OnboardingStep?))?
    func getStep(_ index: Int) -> OnboardingStep? {
        getStepCallCount += 1
        if let getStepHandler = getStepHandler {
            return getStepHandler(index)
        }
        return nil
    }
}

class RootRoutingMock: RootRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeToOnboardingCallCount = 0
    var routeToOnboardingHandler: (() -> ())?
    func routeToOnboarding() {
        routeToOnboardingCallCount += 1
        if let routeToOnboardingHandler = routeToOnboardingHandler {
            routeToOnboardingHandler()
        }
    }

    var detachOnboardingAndRouteToMainCallCount = 0
    var detachOnboardingAndRouteToMainHandler: ((Bool) -> ())?
    func detachOnboardingAndRouteToMain(animated: Bool) {
        detachOnboardingAndRouteToMainCallCount += 1
        if let detachOnboardingAndRouteToMainHandler = detachOnboardingAndRouteToMainHandler {
            detachOnboardingAndRouteToMainHandler(animated)
        }
    }
}

class StatusViewControllableMock: StatusViewControllable {
    init() {}
    init(router: StatusRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var routerSetCallCount = 0
    var router: StatusRouting? { didSet { routerSetCallCount += 1 } }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ViewControllableMock: ViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class AboutListenerMock: AboutListener {
    init() {}

    var aboutRequestsDismissalCallCount = 0
    var aboutRequestsDismissalHandler: ((Bool) -> ())?
    func aboutRequestsDismissal(shouldHideViewController: Bool) {
        aboutRequestsDismissalCallCount += 1
        if let aboutRequestsDismissalHandler = aboutRequestsDismissalHandler {
            aboutRequestsDismissalHandler(shouldHideViewController)
        }
    }
}

class ExposureControllingMock: ExposureControlling {
    init() {}

    var activateCallCount = 0
    var activateHandler: (() -> ())?
    func activate() {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
    }

    var requestExposureNotificationPermissionCallCount = 0
    var requestExposureNotificationPermissionHandler: (() -> ())?
    func requestExposureNotificationPermission() {
        requestExposureNotificationPermissionCallCount += 1
        if let requestExposureNotificationPermissionHandler = requestExposureNotificationPermissionHandler {
            requestExposureNotificationPermissionHandler()
        }
    }

    var requestPushNotificationPermissionCallCount = 0
    var requestPushNotificationPermissionHandler: ((@escaping () -> ()) -> ())?
    func requestPushNotificationPermission(_ completion: @escaping () -> ()) {
        requestPushNotificationPermissionCallCount += 1
        if let requestPushNotificationPermissionHandler = requestPushNotificationPermissionHandler {
            requestPushNotificationPermissionHandler(completion)
        }
    }

    var confirmExposureNotificationCallCount = 0
    var confirmExposureNotificationHandler: (() -> ())?
    func confirmExposureNotification() {
        confirmExposureNotificationCallCount += 1
        if let confirmExposureNotificationHandler = confirmExposureNotificationHandler {
            confirmExposureNotificationHandler()
        }
    }

    // MARK: - Lab Flow

    /// Represents a ConfirmationKey for the Lab Flow
    ///
    /// - Parameter confirmationKey: Human readable lab confirmation key
    /// - Parameter expiration: Key's expiration date
    typealias ConfirmationKey = (confirmationKey: String, expiration: Date)

    var requestLabConfirmationKeyCallCount = 0
    var requestLabConfirmationKeyHandler: ((@escaping (_ result: Result<ConfirmationKey, ExposureDataError>) -> ()) -> ())?
    func requestLabConfirmationKey(completion: @escaping (_ result: Result<ConfirmationKey, ExposureDataError>) -> ()) {
        requestLabConfirmationKeyCallCount += 1
        if let requestLabConfirmationKeyHandler = requestLabConfirmationKeyHandler {
            requestLabConfirmationKeyHandler(completion)
        }
    }

    var requestUploadKeysCallCount = 0
    var requestUploadKeysHandler: ((@escaping (_ success: Bool) -> ()) -> ())?
    func requestUploadKeys(completion: @escaping (_ success: Bool) -> ()) {
        requestUploadKeysCallCount += 1
        if let requestUploadKeysHandler = requestUploadKeysHandler {
            requestUploadKeysHandler(completion)
        }
    }
}

class InfectedCodeEntryListenerMock: InfectedCodeEntryListener {
    init() {}
}

class InfectedCodeEntryViewControllableMock: InfectedCodeEntryViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class InfectedInfoListenerMock: InfectedInfoListener {
    init() {}
}

class InfectedListenerMock: InfectedListener {
    init() {}
}

class MoreInformationViewControllableMock: MoreInformationViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class NetworkManagingMock: NetworkManaging {
    init() {}

    var getManifestCallCount = 0
    var getManifestHandler: ((@escaping (Result<Manifest, NetworkManagerError>) -> ()) -> ())?
    func getManifest(completion: @escaping (Result<Manifest, NetworkManagerError>) -> ()) {
        getManifestCallCount += 1
        if let getManifestHandler = getManifestHandler {
            getManifestHandler(completion)
        }
    }

    var getAppConfigCallCount = 0
    var getAppConfigHandler: ((String, @escaping (Result<AppConfig, NetworkManagerError>) -> ()) -> ())?
    func getAppConfig(appConfig: String, completion: @escaping (Result<AppConfig, NetworkManagerError>) -> ()) {
        getAppConfigCallCount += 1
        if let getAppConfigHandler = getAppConfigHandler {
            getAppConfigHandler(appConfig, completion)
        }
    }

    var getRiskCalculationParametersCallCount = 0
    var getRiskCalculationParametersHandler: ((String, @escaping (Result<RiskCalculationParameters, NetworkManagerError>) -> ()) -> ())?
    func getRiskCalculationParameters(appConfig: String, completion: @escaping (Result<RiskCalculationParameters, NetworkManagerError>) -> ()) {
        getRiskCalculationParametersCallCount += 1
        if let getRiskCalculationParametersHandler = getRiskCalculationParametersHandler {
            getRiskCalculationParametersHandler(appConfig, completion)
        }
    }

    var getDiagnosisKeysCallCount = 0
    var getDiagnosisKeysHandler: ((String, @escaping (Result<ExposureKeySet, NetworkManagerError>) -> ()) -> ())?
    func getDiagnosisKeys(_ id: String, completion: @escaping (Result<ExposureKeySet, NetworkManagerError>) -> ()) {
        getDiagnosisKeysCallCount += 1
        if let getDiagnosisKeysHandler = getDiagnosisKeysHandler {
            getDiagnosisKeysHandler(id, completion)
        }
    }

    var postRegisterCallCount = 0
    var postRegisterHandler: ((RegisterRequest, @escaping (Result<LabInformation, NetworkManagerError>) -> ()) -> ())?
    func postRegister(register: RegisterRequest, completion: @escaping (Result<LabInformation, NetworkManagerError>) -> ()) {
        postRegisterCallCount += 1
        if let postRegisterHandler = postRegisterHandler {
            postRegisterHandler(register, completion)
        }
    }

    var postKeysCallCount = 0
    var postKeysHandler: ((DiagnosisKeys, @escaping (NetworkManagerError?) -> ()) -> ())?
    func postKeys(diagnosisKeys: DiagnosisKeys, completion: @escaping (NetworkManagerError?) -> ()) {
        postKeysCallCount += 1
        if let postKeysHandler = postKeysHandler {
            postKeysHandler(diagnosisKeys, completion)
        }
    }

    var postStopKeysCallCount = 0
    var postStopKeysHandler: ((DiagnosisKeys, @escaping (NetworkManagerError?) -> ()) -> ())?
    func postStopKeys(diagnosisKeys: DiagnosisKeys, completion: @escaping (NetworkManagerError?) -> ()) {
        postStopKeysCallCount += 1
        if let postStopKeysHandler = postStopKeysHandler {
            postStopKeysHandler(diagnosisKeys, completion)
        }
    }
}

class OnboardingConsentBuildableMock: OnboardingConsentBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((OnboardingConsentListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingConsentListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }

    var buildWithListenerCallCount = 0
    var buildWithListenerHandler: ((OnboardingConsentListener, Int) -> (ViewControllable))?
    func build(withListener listener: OnboardingConsentListener, initialIndex: Int) -> ViewControllable {
        buildWithListenerCallCount += 1
        if let buildWithListenerHandler = buildWithListenerHandler {
            return buildWithListenerHandler(listener, initialIndex)
        }
        return ViewControllableMock()
    }
}

class HelpListenerMock: HelpListener {
    init() {}

    var helpRequestsFAQCallCount = 0
    var helpRequestsFAQHandler: (() -> ())?
    func helpRequestsFAQ() {
        helpRequestsFAQCallCount += 1
        if let helpRequestsFAQHandler = helpRequestsFAQHandler {
            helpRequestsFAQHandler()
        }
    }

    var helpRequestsPermissionCallCount = 0
    var helpRequestsPermissionHandler: (() -> ())?
    func helpRequestsPermission() {
        helpRequestsPermissionCallCount += 1
        if let helpRequestsPermissionHandler = helpRequestsPermissionHandler {
            helpRequestsPermissionHandler()
        }
    }

    var helpRequestsCloseCallCount = 0
    var helpRequestsCloseHandler: (() -> ())?
    func helpRequestsClose() {
        helpRequestsCloseCallCount += 1
        if let helpRequestsCloseHandler = helpRequestsCloseHandler {
            helpRequestsCloseHandler()
        }
    }
}

class OnboardingListenerMock: OnboardingListener {
    init() {}

    var didCompleteOnboardingCallCount = 0
    var didCompleteOnboardingHandler: (() -> ())?
    func didCompleteOnboarding() {
        didCompleteOnboardingCallCount += 1
        if let didCompleteOnboardingHandler = didCompleteOnboardingHandler {
            didCompleteOnboardingHandler()
        }
    }
}

class OnboardingRoutingMock: OnboardingRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var routeToStepsCallCount = 0
    var routeToStepsHandler: (() -> ())?
    func routeToSteps() {
        routeToStepsCallCount += 1
        if let routeToStepsHandler = routeToStepsHandler {
            routeToStepsHandler()
        }
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    var routeToConsentCallCount = 0
    var routeToConsentHandler: ((Bool) -> ())?
    func routeToConsent(animated: Bool) {
        routeToConsentCallCount += 1
        if let routeToConsentHandler = routeToConsentHandler {
            routeToConsentHandler(animated)
        }
    }

    var routeToConsentWithIndexCallCount = 0
    var routeToConsentWithIndexHandler: ((Int, Bool) -> ())?
    func routeToConsent(withIndex index: Int, animated: Bool) {
        routeToConsentWithIndexCallCount += 1
        if let routeToConsentWithIndexHandler = routeToConsentWithIndexHandler {
            routeToConsentWithIndexHandler(index, animated)
        }
    }

    var routeToHelpCallCount = 0
    var routeToHelpHandler: (() -> ())?
    func routeToHelp() {
        routeToHelpCallCount += 1
        if let routeToHelpHandler = routeToHelpHandler {
            routeToHelpHandler()
        }
    }
}

class OnboardingStepBuildableMock: OnboardingStepBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((OnboardingStepListener) -> (ViewControllable))?
    func build(withListener listener: OnboardingStepListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }

    var buildWithListenerCallCount = 0
    var buildWithListenerHandler: ((OnboardingStepListener, Int) -> (ViewControllable))?
    func build(withListener listener: OnboardingStepListener, initialIndex: Int) -> ViewControllable {
        buildWithListenerCallCount += 1
        if let buildWithListenerHandler = buildWithListenerHandler {
            return buildWithListenerHandler(listener, initialIndex)
        }
        return ViewControllableMock()
    }
}

class OnboardingViewControllableMock: OnboardingViewControllable {
    init() {}
    init(router: OnboardingRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var helpRequestsFAQCallCount = 0
    var helpRequestsFAQHandler: (() -> ())?
    func helpRequestsFAQ() {
        helpRequestsFAQCallCount += 1
        if let helpRequestsFAQHandler = helpRequestsFAQHandler {
            helpRequestsFAQHandler()
        }
    }

    var helpRequestsPermissionCallCount = 0
    var helpRequestsPermissionHandler: (() -> ())?
    func helpRequestsPermission() {
        helpRequestsPermissionCallCount += 1
        if let helpRequestsPermissionHandler = helpRequestsPermissionHandler {
            helpRequestsPermissionHandler()
        }
    }

    var helpRequestsCloseCallCount = 0
    var helpRequestsCloseHandler: (() -> ())?
    func helpRequestsClose() {
        helpRequestsCloseCallCount += 1
        if let helpRequestsCloseHandler = helpRequestsCloseHandler {
            helpRequestsCloseHandler()
        }
    }

    var routerSetCallCount = 0
    var router: OnboardingRouting? { didSet { routerSetCallCount += 1 } }

    var pushCallCount = 0
    var pushHandler: ((ViewControllable, Bool) -> ())?
    func push(viewController: ViewControllable, animated: Bool) {
        pushCallCount += 1
        if let pushHandler = pushHandler {
            pushHandler(viewController, animated)
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var onboardingStepsDidCompleteCallCount = 0
    var onboardingStepsDidCompleteHandler: (() -> ())?
    func onboardingStepsDidComplete() {
        onboardingStepsDidCompleteCallCount += 1
        if let onboardingStepsDidCompleteHandler = onboardingStepsDidCompleteHandler {
            onboardingStepsDidCompleteHandler()
        }
    }

    var consentCloseCallCount = 0
    var consentCloseHandler: (() -> ())?
    func consentClose() {
        consentCloseCallCount += 1
        if let consentCloseHandler = consentCloseHandler {
            consentCloseHandler()
        }
    }

    var consentRequestCallCount = 0
    var consentRequestHandler: ((OnboardingConsentStepIndex) -> ())?
    func consentRequest(step: OnboardingConsentStepIndex) {
        consentRequestCallCount += 1
        if let consentRequestHandler = consentRequestHandler {
            consentRequestHandler(step)
        }
    }

    var displayHelpCallCount = 0
    var displayHelpHandler: (() -> ())?
    func displayHelp() {
        displayHelpCallCount += 1
        if let displayHelpHandler = displayHelpHandler {
            displayHelpHandler()
        }
    }
}

class ReceivedNotificationListenerMock: ReceivedNotificationListener {
    init() {}

    var receivedNotificationWantsDismissalCallCount = 0
    var receivedNotificationWantsDismissalHandler: ((Bool) -> ())?
    func receivedNotificationWantsDismissal(shouldDismissViewController: Bool) {
        receivedNotificationWantsDismissalCallCount += 1
        if let receivedNotificationWantsDismissalHandler = receivedNotificationWantsDismissalHandler {
            receivedNotificationWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class RequestTestListenerMock: RequestTestListener {
    init() {}

    var requestTestWantsDismissalCallCount = 0
    var requestTestWantsDismissalHandler: ((Bool) -> ())?
    func requestTestWantsDismissal(shouldDismissViewController: Bool) {
        requestTestWantsDismissalCallCount += 1
        if let requestTestWantsDismissalHandler = requestTestWantsDismissalHandler {
            requestTestWantsDismissalHandler(shouldDismissViewController)
        }
    }
}

class RoutingMock: Routing {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class StorageControllerBuildableMock: StorageControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (StorageControlling))?
    func build() -> StorageControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return StorageControllingMock()
    }
}

class HelpViewControllableMock: HelpViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var acceptButtonPressedCallCount = 0
    var acceptButtonPressedHandler: (() -> ())?
    func acceptButtonPressed() {
        acceptButtonPressedCallCount += 1
        if let acceptButtonPressedHandler = acceptButtonPressedHandler {
            acceptButtonPressedHandler()
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class OnboardingConsentManagingMock: OnboardingConsentManaging {
    init() {}
    init(onboardingConsentSteps: [OnboardingConsentStep] = [OnboardingConsentStep]()) {
        self.onboardingConsentSteps = onboardingConsentSteps
    }

    var onboardingConsentStepsSetCallCount = 0
    var onboardingConsentSteps: [OnboardingConsentStep] = [OnboardingConsentStep]() { didSet { onboardingConsentStepsSetCallCount += 1 } }

    var getStepCallCount = 0
    var getStepHandler: ((Int) -> (OnboardingConsentStep?))?
    func getStep(_ index: Int) -> OnboardingConsentStep? {
        getStepCallCount += 1
        if let getStepHandler = getStepHandler {
            return getStepHandler(index)
        }
        return nil
    }

    var getNextConsentStepCallCount = 0
    var getNextConsentStepHandler: ((OnboardingConsentStepIndex) -> (OnboardingConsentStepIndex?))?
    func getNextConsentStep(_ currentStep: OnboardingConsentStepIndex) -> OnboardingConsentStepIndex? {
        getNextConsentStepCallCount += 1
        if let getNextConsentStepHandler = getNextConsentStepHandler {
            return getNextConsentStepHandler(currentStep)
        }
        return nil
    }

    var askEnableExposureNotificationsCallCount = 0
    var askEnableExposureNotificationsHandler: ((@escaping ((_ exposureActiveState: ExposureActiveState) -> ())) -> ())?
    func askEnableExposureNotifications(_ completion: @escaping ((_ exposureActiveState: ExposureActiveState) -> ())) {
        askEnableExposureNotificationsCallCount += 1
        if let askEnableExposureNotificationsHandler = askEnableExposureNotificationsHandler {
            askEnableExposureNotificationsHandler(completion)
        }
    }

    var goToBluetoothSettingsCallCount = 0
    var goToBluetoothSettingsHandler: ((@escaping (() -> ())) -> ())?
    func goToBluetoothSettings(_ completion: @escaping (() -> ())) {
        goToBluetoothSettingsCallCount += 1
        if let goToBluetoothSettingsHandler = goToBluetoothSettingsHandler {
            goToBluetoothSettingsHandler(completion)
        }
    }

    var askNotificationsAuthorizationCallCount = 0
    var askNotificationsAuthorizationHandler: ((@escaping (() -> ())) -> ())?
    func askNotificationsAuthorization(_ completion: @escaping (() -> ())) {
        askNotificationsAuthorizationCallCount += 1
        if let askNotificationsAuthorizationHandler = askNotificationsAuthorizationHandler {
            askNotificationsAuthorizationHandler(completion)
        }
    }
}

class RequestTestViewControllableMock: RequestTestViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class StatusRoutingMock: StatusRouting {
    init() {}
    init(viewControllable: ViewControllable = ViewControllableMock()) {
        self.viewControllable = viewControllable
    }

    var viewControllableSetCallCount = 0
    var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }
}

class AboutViewControllableMock: AboutViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class DeveloperMenuViewControllableMock: DeveloperMenuViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MainViewControllableMock: MainViewControllable {
    init() {}
    init(router: MainRouting? = nil, uiviewController: UIViewController = UIViewController()) {
        self.router = router
        self.uiviewController = uiviewController
    }

    var aboutRequestsDismissalCallCount = 0
    var aboutRequestsDismissalHandler: ((Bool) -> ())?
    func aboutRequestsDismissal(shouldHideViewController: Bool) {
        aboutRequestsDismissalCallCount += 1
        if let aboutRequestsDismissalHandler = aboutRequestsDismissalHandler {
            aboutRequestsDismissalHandler(shouldHideViewController)
        }
    }

    var requestTestWantsDismissalCallCount = 0
    var requestTestWantsDismissalHandler: ((Bool) -> ())?
    func requestTestWantsDismissal(shouldDismissViewController: Bool) {
        requestTestWantsDismissalCallCount += 1
        if let requestTestWantsDismissalHandler = requestTestWantsDismissalHandler {
            requestTestWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var handleButtonActionCallCount = 0
    var handleButtonActionHandler: ((StatusViewButtonModel.Action) -> ())?
    func handleButtonAction(_ action: StatusViewButtonModel.Action) {
        handleButtonActionCallCount += 1
        if let handleButtonActionHandler = handleButtonActionHandler {
            handleButtonActionHandler(action)
        }
    }

    var receivedNotificationWantsDismissalCallCount = 0
    var receivedNotificationWantsDismissalHandler: ((Bool) -> ())?
    func receivedNotificationWantsDismissal(shouldDismissViewController: Bool) {
        receivedNotificationWantsDismissalCallCount += 1
        if let receivedNotificationWantsDismissalHandler = receivedNotificationWantsDismissalHandler {
            receivedNotificationWantsDismissalHandler(shouldDismissViewController)
        }
    }

    var moreInformationRequestsAboutCallCount = 0
    var moreInformationRequestsAboutHandler: (() -> ())?
    func moreInformationRequestsAbout() {
        moreInformationRequestsAboutCallCount += 1
        if let moreInformationRequestsAboutHandler = moreInformationRequestsAboutHandler {
            moreInformationRequestsAboutHandler()
        }
    }

    var moreInformationRequestsReceivedNotificationCallCount = 0
    var moreInformationRequestsReceivedNotificationHandler: (() -> ())?
    func moreInformationRequestsReceivedNotification() {
        moreInformationRequestsReceivedNotificationCallCount += 1
        if let moreInformationRequestsReceivedNotificationHandler = moreInformationRequestsReceivedNotificationHandler {
            moreInformationRequestsReceivedNotificationHandler()
        }
    }

    var routerSetCallCount = 0
    var router: MainRouting? { didSet { routerSetCallCount += 1 } }

    var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(stackedViewController: ViewControllable) {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(stackedViewController)
        }
    }

    var moreInformationRequestsInfectedCallCount = 0
    var moreInformationRequestsInfectedHandler: (() -> ())?
    func moreInformationRequestsInfected() {
        moreInformationRequestsInfectedCallCount += 1
        if let moreInformationRequestsInfectedHandler = moreInformationRequestsInfectedHandler {
            moreInformationRequestsInfectedHandler()
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var moreInformationRequestsRequestTestCallCount = 0
    var moreInformationRequestsRequestTestHandler: (() -> ())?
    func moreInformationRequestsRequestTest() {
        moreInformationRequestsRequestTestCallCount += 1
        if let moreInformationRequestsRequestTestHandler = moreInformationRequestsRequestTestHandler {
            moreInformationRequestsRequestTestHandler()
        }
    }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool) -> ())?
    func present(viewController: ViewControllable, animated: Bool) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated)
        }
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated)
        }
    }
}

class ShareSheetListenerMock: ShareSheetListener {
    init() {}

    var shareSheetDidCompleteCallCount = 0
    var shareSheetDidCompleteHandler: (() -> ())?
    func shareSheetDidComplete() {
        shareSheetDidCompleteCallCount += 1
        if let shareSheetDidCompleteHandler = shareSheetDidCompleteHandler {
            shareSheetDidCompleteHandler()
        }
    }
}

class ShareSheetViewControllableMock: ShareSheetViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class StatusListenerMock: StatusListener {
    init() {}

    var handleButtonActionCallCount = 0
    var handleButtonActionHandler: ((StatusViewButtonModel.Action) -> ())?
    func handleButtonAction(_ action: StatusViewButtonModel.Action) {
        handleButtonActionCallCount += 1
        if let handleButtonActionHandler = handleButtonActionHandler {
            handleButtonActionHandler(action)
        }
    }
}

class WebViewingMock: WebViewing {
    init() {}
    init(uiview: UIView = UIView(frame: .zero)) {
        self.uiview = uiview
    }

    var uiviewSetCallCount = 0
    var uiview: UIView = UIView(frame: .zero) { didSet { uiviewSetCallCount += 1 } }

    var loadCallCount = 0
    var loadHandler: ((URLRequest) -> ())?
    func load(request: URLRequest) {
        loadCallCount += 1
        if let loadHandler = loadHandler {
            loadHandler(request)
        }
    }
}

class ENManagingMock: ENManaging {
    init() {}
    init(exposureNotificationEnabled: Bool = false, exposureNotificationStatus: ENStatus) {
        self.exposureNotificationEnabled = exposureNotificationEnabled
        self._exposureNotificationStatus = exposureNotificationStatus
    }

    var activateCallCount = 0
    var activateHandler: ((@escaping ENErrorHandler) -> ())?
    func activate(completionHandler: @escaping ENErrorHandler) {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler(completionHandler)
        }
    }

    var invalidateCallCount = 0
    var invalidateHandler: (() -> ())?
    func invalidate() {
        invalidateCallCount += 1
        if let invalidateHandler = invalidateHandler {
            invalidateHandler()
        }
    }

    var detectExposuresCallCount = 0
    var detectExposuresHandler: ((ENExposureConfiguration, [URL], @escaping ENDetectExposuresHandler) -> (Progress))?
    func detectExposures(configuration: ENExposureConfiguration, diagnosisKeyURLs: [URL], completionHandler: @escaping ENDetectExposuresHandler) -> Progress {
        detectExposuresCallCount += 1
        if let detectExposuresHandler = detectExposuresHandler {
            return detectExposuresHandler(configuration, diagnosisKeyURLs, completionHandler)
        }
        fatalError("detectExposuresHandler returns can't have a default value thus its handler must be set")
    }

    var getDiagnosisKeysCallCount = 0
    var getDiagnosisKeysHandler: ((@escaping ENGetDiagnosisKeysHandler) -> ())?
    func getDiagnosisKeys(completionHandler: @escaping ENGetDiagnosisKeysHandler) {
        getDiagnosisKeysCallCount += 1
        if let getDiagnosisKeysHandler = getDiagnosisKeysHandler {
            getDiagnosisKeysHandler(completionHandler)
        }
    }

    var setExposureNotificationEnabledCallCount = 0
    var setExposureNotificationEnabledHandler: ((Bool, @escaping ENErrorHandler) -> ())?
    func setExposureNotificationEnabled(_ enabled: Bool, completionHandler: @escaping ENErrorHandler) {
        setExposureNotificationEnabledCallCount += 1
        if let setExposureNotificationEnabledHandler = setExposureNotificationEnabledHandler {
            setExposureNotificationEnabledHandler(enabled, completionHandler)
        }
    }

    var exposureNotificationEnabledSetCallCount = 0
    var exposureNotificationEnabled: Bool = false { didSet { exposureNotificationEnabledSetCallCount += 1 } }

    var exposureNotificationStatusSetCallCount = 0
    private var _exposureNotificationStatus: ENStatus! { didSet { exposureNotificationStatusSetCallCount += 1 } }
    var exposureNotificationStatus: ENStatus {
        get { return _exposureNotificationStatus }
        set { _exposureNotificationStatus = newValue }
    }

    var invalidationHandlerSetCallCount = 0
    var invalidationHandler: (() -> ())? { didSet { invalidationHandlerSetCallCount += 1 } }

    static var authorizationStatusSetCallCount = 0
    private static var _authorizationStatus: ENAuthorizationStatus! { didSet { authorizationStatusSetCallCount += 1 } }
    static var authorizationStatus: ENAuthorizationStatus {
        get { return _authorizationStatus }
        set { _authorizationStatus = newValue }
    }

    var getExposureInfoCallCount = 0
    var getExposureInfoHandler: ((ENExposureDetectionSummary, String, @escaping ENGetExposureInfoHandler) -> (Progress))?
    func getExposureInfo(summary: ENExposureDetectionSummary, userExplanation: String, completionHandler: @escaping ENGetExposureInfoHandler) -> Progress {
        getExposureInfoCallCount += 1
        if let getExposureInfoHandler = getExposureInfoHandler {
            return getExposureInfoHandler(summary, userExplanation, completionHandler)
        }
        fatalError("getExposureInfoHandler returns can't have a default value thus its handler must be set")
    }
}

class WebListenerMock: WebListener {
    init() {}
}

class BackgroundControllingMock: BackgroundControlling {
    init() {}

    var scheduleCallCount = 0
    var scheduleHandler: ((String, @escaping (BGTask) -> ()) -> ())?
    func schedule(taskIdentifier: String, launchHandler: @escaping (BGTask) -> ()) {
        scheduleCallCount += 1
        if let scheduleHandler = scheduleHandler {
            scheduleHandler(taskIdentifier, launchHandler)
        }
    }
}

class ReceivedNotificationViewControllableMock: ReceivedNotificationViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class WebBuildableMock: WebBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((WebListener, URLRequest) -> (ViewControllable))?
    func build(withListener listener: WebListener, urlRequest: URLRequest) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, urlRequest)
        }
        return ViewControllableMock()
    }
}

class MoreInformationListenerMock: MoreInformationListener {
    init() {}

    var moreInformationRequestsAboutCallCount = 0
    var moreInformationRequestsAboutHandler: (() -> ())?
    func moreInformationRequestsAbout() {
        moreInformationRequestsAboutCallCount += 1
        if let moreInformationRequestsAboutHandler = moreInformationRequestsAboutHandler {
            moreInformationRequestsAboutHandler()
        }
    }

    var moreInformationRequestsReceivedNotificationCallCount = 0
    var moreInformationRequestsReceivedNotificationHandler: (() -> ())?
    func moreInformationRequestsReceivedNotification() {
        moreInformationRequestsReceivedNotificationCallCount += 1
        if let moreInformationRequestsReceivedNotificationHandler = moreInformationRequestsReceivedNotificationHandler {
            moreInformationRequestsReceivedNotificationHandler()
        }
    }

    var moreInformationRequestsInfectedCallCount = 0
    var moreInformationRequestsInfectedHandler: (() -> ())?
    func moreInformationRequestsInfected() {
        moreInformationRequestsInfectedCallCount += 1
        if let moreInformationRequestsInfectedHandler = moreInformationRequestsInfectedHandler {
            moreInformationRequestsInfectedHandler()
        }
    }

    var moreInformationRequestsRequestTestCallCount = 0
    var moreInformationRequestsRequestTestHandler: (() -> ())?
    func moreInformationRequestsRequestTest() {
        moreInformationRequestsRequestTestCallCount += 1
        if let moreInformationRequestsRequestTestHandler = moreInformationRequestsRequestTestHandler {
            moreInformationRequestsRequestTestHandler()
        }
    }
}

class OnboardingBuildableMock: OnboardingBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((OnboardingListener) -> (Routing))?
    func build(withListener listener: OnboardingListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class DeveloperMenuBuildableMock: DeveloperMenuBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((DeveloperMenuListener) -> (ViewControllable))?
    func build(listener: DeveloperMenuListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class NetworkControllingMock: NetworkControlling {
    init() {}
    init(exposureKeySetProvider: Future<ExposureKeySetProvider, NetworkError>, exposureRiskCalculationParameters: Future<ExposureRiskCalculationParameters, NetworkError>, resourceBundle: Future<ResourceBundle, NetworkError>) {
        self._exposureKeySetProvider = exposureKeySetProvider
        self._exposureRiskCalculationParameters = exposureRiskCalculationParameters
        self._resourceBundle = resourceBundle
    }

    var exposureKeySetProviderSetCallCount = 0
    private var _exposureKeySetProvider: Future<ExposureKeySetProvider, NetworkError>! { didSet { exposureKeySetProviderSetCallCount += 1 } }
    var exposureKeySetProvider: Future<ExposureKeySetProvider, NetworkError> {
        get { return _exposureKeySetProvider }
        set { _exposureKeySetProvider = newValue }
    }

    var exposureRiskCalculationParametersSetCallCount = 0
    private var _exposureRiskCalculationParameters: Future<ExposureRiskCalculationParameters, NetworkError>! { didSet { exposureRiskCalculationParametersSetCallCount += 1 } }
    var exposureRiskCalculationParameters: Future<ExposureRiskCalculationParameters, NetworkError> {
        get { return _exposureRiskCalculationParameters }
        set { _exposureRiskCalculationParameters = newValue }
    }

    var resourceBundleSetCallCount = 0
    private var _resourceBundle: Future<ResourceBundle, NetworkError>! { didSet { resourceBundleSetCallCount += 1 } }
    var resourceBundle: Future<ResourceBundle, NetworkError> {
        get { return _resourceBundle }
        set { _resourceBundle = newValue }
    }

    var requestLabConfirmationKeyCallCount = 0
    var requestLabConfirmationKeyHandler: (() -> (AnyPublisher<LabConfirmationKey, NetworkError>))?
    func requestLabConfirmationKey() -> AnyPublisher<LabConfirmationKey, NetworkError> {
        requestLabConfirmationKeyCallCount += 1
        if let requestLabConfirmationKeyHandler = requestLabConfirmationKeyHandler {
            return requestLabConfirmationKeyHandler()
        }
        fatalError("requestLabConfirmationKeyHandler returns can't have a default value thus its handler must be set")
    }
}

class ExposureDataControllingMock: ExposureDataControlling {
    init() {}

    var fetchAndProcessExposureKeySetsCallCount = 0
    var fetchAndProcessExposureKeySetsHandler: (() -> (Future<(), Never>))?
    func fetchAndProcessExposureKeySets() -> Future<(), Never> {
        fetchAndProcessExposureKeySetsCallCount += 1
        if let fetchAndProcessExposureKeySetsHandler = fetchAndProcessExposureKeySetsHandler {
            return fetchAndProcessExposureKeySetsHandler()
        }
        fatalError("fetchAndProcessExposureKeySetsHandler returns can't have a default value thus its handler must be set")
    }

    var requestLabConfirmationKeyCallCount = 0
    var requestLabConfirmationKeyHandler: (() -> (AnyPublisher<LabConfirmationKey, ExposureDataError>))?
    func requestLabConfirmationKey() -> AnyPublisher<LabConfirmationKey, ExposureDataError> {
        requestLabConfirmationKeyCallCount += 1
        if let requestLabConfirmationKeyHandler = requestLabConfirmationKeyHandler {
            return requestLabConfirmationKeyHandler()
        }
        fatalError("requestLabConfirmationKeyHandler returns can't have a default value thus its handler must be set")
    }
}

class WebViewControllableMock: WebViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class ExposureDataOperationProviderMock: ExposureDataOperationProvider {
    init() {}
    init(requestLabConfirmationKeyOperation: RequestLabConfirmationKeyDataOperation) {
        self._requestLabConfirmationKeyOperation = requestLabConfirmationKeyOperation
    }

    var requestLabConfirmationKeyOperationSetCallCount = 0
    private var _requestLabConfirmationKeyOperation: RequestLabConfirmationKeyDataOperation! { didSet { requestLabConfirmationKeyOperationSetCallCount += 1 } }
    var requestLabConfirmationKeyOperation: RequestLabConfirmationKeyDataOperation {
        get { return _requestLabConfirmationKeyOperation }
        set { _requestLabConfirmationKeyOperation = newValue }
    }
}

class RequestTestBuildableMock: RequestTestBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((RequestTestListener) -> (ViewControllable))?
    func build(withListener listener: RequestTestListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class StatusBuildableMock: StatusBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((StatusListener, NSLayoutYAxisAnchor?) -> (Routing))?
    func build(withListener listener: StatusListener, topAnchor: NSLayoutYAxisAnchor?) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, topAnchor)
        }
        return RoutingMock()
    }
}

class RootViewControllableMock: RootViewControllable {
    init() {}
    init(uiviewController: UIViewController = UIViewController(), router: RootRouting? = nil) {
        self.uiviewController = uiviewController
        self.router = router
    }

    var developerMenuRequestsOnboardingFlowCallCount = 0
    var developerMenuRequestsOnboardingFlowHandler: (() -> ())?
    func developerMenuRequestsOnboardingFlow() {
        developerMenuRequestsOnboardingFlowCallCount += 1
        if let developerMenuRequestsOnboardingFlowHandler = developerMenuRequestsOnboardingFlowHandler {
            developerMenuRequestsOnboardingFlowHandler()
        }
    }

    var didCompleteOnboardingCallCount = 0
    var didCompleteOnboardingHandler: (() -> ())?
    func didCompleteOnboarding() {
        didCompleteOnboardingCallCount += 1
        if let didCompleteOnboardingHandler = didCompleteOnboardingHandler {
            didCompleteOnboardingHandler()
        }
    }

    var uiviewControllerSetCallCount = 0
    var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    var routerSetCallCount = 0
    var router: RootRouting? { didSet { routerSetCallCount += 1 } }

    var presentCallCount = 0
    var presentHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func present(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        presentCallCount += 1
        if let presentHandler = presentHandler {
            presentHandler(viewController, animated, completion)
        }
    }

    var dismissCallCount = 0
    var dismissHandler: ((ViewControllable, Bool, (() -> ())?) -> ())?
    func dismiss(viewController: ViewControllable, animated: Bool, completion: (() -> ())?) {
        dismissCallCount += 1
        if let dismissHandler = dismissHandler {
            dismissHandler(viewController, animated, completion)
        }
    }

    var embedCallCount = 0
    var embedHandler: ((ViewControllable) -> ())?
    func embed(viewController: ViewControllable) {
        embedCallCount += 1
        if let embedHandler = embedHandler {
            embedHandler(viewController)
        }
    }
}

class ReceivedNotificationBuildableMock: ReceivedNotificationBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((ReceivedNotificationListener) -> (ViewControllable))?
    func build(withListener listener: ReceivedNotificationListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class BackgroundControllerBuildableMock: BackgroundControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (BackgroundControlling))?
    func build() -> BackgroundControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return BackgroundControllingMock()
    }
}

class ShareSheetBuildableMock: ShareSheetBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((ShareSheetListener, [Any]) -> (ViewControllable))?
    func build(withListener listener: ShareSheetListener, items: [Any]) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, items)
        }
        return ViewControllableMock()
    }
}

class InfectedBuildableMock: InfectedBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((InfectedListener) -> (Routing))?
    func build(withListener listener: InfectedListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class AboutBuildableMock: AboutBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((AboutListener) -> (ViewControllable))?
    func build(withListener listener: AboutListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class InfectedInfoBuildableMock: InfectedInfoBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((InfectedInfoListener) -> (Routing))?
    func build(withListener listener: InfectedInfoListener) -> Routing {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return RoutingMock()
    }
}

class InfectedCodeEntryBuildableMock: InfectedCodeEntryBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((InfectedCodeEntryListener) -> (ViewControllable))?
    func build(withListener listener: InfectedCodeEntryListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class HelpBuildableMock: HelpBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((HelpListener) -> (ViewControllable))?
    func build(withListener listener: HelpListener) -> ViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ViewControllableMock()
    }
}

class MoreInformationBuildableMock: MoreInformationBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: ((MoreInformationListener) -> (MoreInformationViewControllable))?
    func build(withListener listener: MoreInformationListener) -> MoreInformationViewControllable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return MoreInformationViewControllableMock()
    }
}

class OnboardingStepListenerMock: OnboardingStepListener {
    init() {}

    var onboardingStepsDidCompleteCallCount = 0
    var onboardingStepsDidCompleteHandler: (() -> ())?
    func onboardingStepsDidComplete() {
        onboardingStepsDidCompleteCallCount += 1
        if let onboardingStepsDidCompleteHandler = onboardingStepsDidCompleteHandler {
            onboardingStepsDidCompleteHandler()
        }
    }
}

class OnboardingConsentListenerMock: OnboardingConsentListener {
    init() {}

    var consentCloseCallCount = 0
    var consentCloseHandler: (() -> ())?
    func consentClose() {
        consentCloseCallCount += 1
        if let consentCloseHandler = consentCloseHandler {
            consentCloseHandler()
        }
    }

    var consentRequestCallCount = 0
    var consentRequestHandler: ((OnboardingConsentStepIndex) -> ())?
    func consentRequest(step: OnboardingConsentStepIndex) {
        consentRequestCallCount += 1
        if let consentRequestHandler = consentRequestHandler {
            consentRequestHandler(step)
        }
    }

    var displayHelpCallCount = 0
    var displayHelpHandler: (() -> ())?
    func displayHelp() {
        displayHelpCallCount += 1
        if let displayHelpHandler = displayHelpHandler {
            displayHelpHandler()
        }
    }
}

class NetworkControllerBuildableMock: NetworkControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (NetworkControlling))?
    func build() -> NetworkControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return NetworkControllingMock()
    }
}

class ExposureManagingMock: ExposureManaging {
    init() {}

    var activateCallCount = 0
    var activateHandler: ((@escaping (ExposureManagerStatus) -> ()) -> ())?
    func activate(completion: @escaping (ExposureManagerStatus) -> ()) {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler(completion)
        }
    }

    var detectExposuresCallCount = 0
    var detectExposuresHandler: (([URL], @escaping (Result<ExposureDetectionSummary?, ExposureManagerError>) -> ()) -> ())?
    func detectExposures(diagnosisKeyURLs: [URL], completion: @escaping (Result<ExposureDetectionSummary?, ExposureManagerError>) -> ()) {
        detectExposuresCallCount += 1
        if let detectExposuresHandler = detectExposuresHandler {
            detectExposuresHandler(diagnosisKeyURLs, completion)
        }
    }

    var getDiagnonisKeysCallCount = 0
    var getDiagnonisKeysHandler: ((@escaping (Result<[DiagnosisKey], ExposureManagerError>) -> ()) -> ())?
    func getDiagnonisKeys(completion: @escaping (Result<[DiagnosisKey], ExposureManagerError>) -> ()) {
        getDiagnonisKeysCallCount += 1
        if let getDiagnonisKeysHandler = getDiagnonisKeysHandler {
            getDiagnonisKeysHandler(completion)
        }
    }

    var setExposureNotificationEnabledCallCount = 0
    var setExposureNotificationEnabledHandler: ((Bool, @escaping (Result<(), ExposureManagerError>) -> ()) -> ())?
    func setExposureNotificationEnabled(_ enabled: Bool, completion: @escaping (Result<(), ExposureManagerError>) -> ()) {
        setExposureNotificationEnabledCallCount += 1
        if let setExposureNotificationEnabledHandler = setExposureNotificationEnabledHandler {
            setExposureNotificationEnabledHandler(enabled, completion)
        }
    }

    var isExposureNotificationEnabledCallCount = 0
    var isExposureNotificationEnabledHandler: (() -> (Bool))?
    func isExposureNotificationEnabled() -> Bool {
        isExposureNotificationEnabledCallCount += 1
        if let isExposureNotificationEnabledHandler = isExposureNotificationEnabledHandler {
            return isExposureNotificationEnabledHandler()
        }
        return false
    }

    var getExposureNotificationStatusCallCount = 0
    var getExposureNotificationStatusHandler: (() -> (ExposureManagerStatus))?
    func getExposureNotificationStatus() -> ExposureManagerStatus {
        getExposureNotificationStatusCallCount += 1
        if let getExposureNotificationStatusHandler = getExposureNotificationStatusHandler {
            return getExposureNotificationStatusHandler()
        }
        fatalError("getExposureNotificationStatusHandler returns can't have a default value thus its handler must be set")
    }
}

class StorageControllingMock: StorageControlling {
    init() {}

    var storeCallCount = 0
    var storeHandler: ((Data, Any, @escaping (Error?) -> ()) -> ())?
    func store<Key: StoreKey>(data: Data, identifiedBy key: Key, completion: @escaping (Error?) -> ()) {
        storeCallCount += 1
        if let storeHandler = storeHandler {
            storeHandler(data, key, completion)
        }
    }

    var retrieveDataCallCount = 0
    var retrieveDataHandler: ((Any) -> (Data?))?
    func retrieveData<Key: StoreKey>(identifiedBy key: Key) -> Data? {
        retrieveDataCallCount += 1
        if let retrieveDataHandler = retrieveDataHandler {
            return retrieveDataHandler(key)
        }
        return nil
    }
}

class ExposureStateStreamingMock: ExposureStateStreaming {
    init() {}
    init(exposureState: AnyPublisher<ExposureState, Never>, currentExposureState: ExposureState? = nil) {
        self._exposureState = exposureState
        self.currentExposureState = currentExposureState
    }

    var exposureStateSetCallCount = 0
    private var _exposureState: AnyPublisher<ExposureState, Never>! { didSet { exposureStateSetCallCount += 1 } }
    var exposureState: AnyPublisher<ExposureState, Never> {
        get { return _exposureState }
        set { _exposureState = newValue }
    }

    var currentExposureStateSetCallCount = 0
    var currentExposureState: ExposureState? { didSet { currentExposureStateSetCallCount += 1 } }
}

class NetworkManagerBuildableMock: NetworkManagerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (NetworkManaging))?
    func build() -> NetworkManaging {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return NetworkManagingMock()
    }
}

class MutableExposureStateStreamingMock: MutableExposureStateStreaming {
    init() {}
    init(exposureState: AnyPublisher<ExposureState, Never>, currentExposureState: ExposureState? = nil) {
        self._exposureState = exposureState
        self.currentExposureState = currentExposureState
    }

    var exposureStateSetCallCount = 0
    private var _exposureState: AnyPublisher<ExposureState, Never>! { didSet { exposureStateSetCallCount += 1 } }
    var exposureState: AnyPublisher<ExposureState, Never> {
        get { return _exposureState }
        set { _exposureState = newValue }
    }

    var currentExposureStateSetCallCount = 0
    var currentExposureState: ExposureState? { didSet { currentExposureStateSetCallCount += 1 } }

    var updateCallCount = 0
    var updateHandler: ((ExposureState) -> ())?
    func update(state: ExposureState) {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(state)
        }
    }
}

class ExposureControllerBuildableMock: ExposureControllerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (ExposureControlling))?
    func build() -> ExposureControlling {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return ExposureControllingMock()
    }
}

class ExposureManagerBuildableMock: ExposureManagerBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (ExposureManaging?))?
    func build() -> ExposureManaging? {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return nil
    }
}

class RootBuildableMock: RootBuildable {
    init() {}

    var buildCallCount = 0
    var buildHandler: (() -> (AppEntryPoint))?
    func build() -> AppEntryPoint {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler()
        }
        return AppEntryPointMock()
    }
}
